// ----------------------------------------------------------------------------
// turtlebot-ros.haiq - ROS turtlebot reconfiguration
//-----------------------------------------------------------------------------


// Components and connectors

abstract sig component {pub: set topic, sub: set topic}
</
  formula ERATE=0;
/>

abstract sig topic {pub: set component, sub: set component}
</
  formula DROP_RATE=0;
  formula DELAY=0;
  var received: bool init false;
  var processed: bool init false;
  var dropped: bool init false;
  var sent: bool init false;
  [pub:send] (!received) -> (received'=true);
  [] (received)&(!processed) -> DROP_RATE: (dropped'=true) & (processed'=true) + 1-DROP_RATE: (dropped'=false) & (processed'=true);
  [sub:send] (processed)&(!dropped) -> (sent'=true);

  reward timeRew [sub:send] true : DELAY;
/>


fact {all c:component,t:topic | (c in t.sub <=> t in c.sub) and (c in t.pub <=> t in c.pub) }

// Components
abstract sig sensing extends component {}
</
  var sensed: bool init false;
  var sent: bool init false;
  [sense] (!sensed) -> (sensed'=true);
  [pub:send] (!sent)&(sensed) -> (sent'=true);

  reward energyRew [sense] true : ERATE;
/>

abstract sig localization extends component {}
</
  formula ACCRATE=1;
  var processedOK: bool init false;
  var received: bool init false;
  var end: bool init false;
  [sub:send] (!received) -> (received'=true);
  [] (received)&(!end) -> ACCRATE: (processedOK'=true) & (end'=true) + 1-ACCRATE: (processedOK'=false) & (end'=true);

  reward energyRew [sub:send] true : ERATE;
/>

lone sig kinect extends sensing {}
</
  formula ERATE=10;
/>

lone sig lidar extends sensing {}
</
  formula ERATE=30;
/>

lone sig camera extends sensing {}
</
  formula ERATE=12;
/>

lone sig amcl extends localization {}
</
  formula ACCRATE = 0.98;
  formula ERATE = 12;
/>

lone sig mrpt extends localization {}
</
  formula ACCRATE = 0.90;
  formula ERATE = 5;
/>

lone sig markerLocalization extends localization{}
</
  formula ACCRATE = 0.99;
/>

lone sig laserscanNodelet extends component {}
</
  var received: bool init false;
  var sent: bool init false;
  [sub:send] (!received) -> (received'=true);
  [pub:send] (received)&(!sent) -> (sent'=true);
/>

lone sig markerRecognizer extends component {}
</
  var received: bool init false;
  var sent: bool init false;
  [sub:send] (!received) -> (received'=true);
  [pub:send] (received)&(!sent) -> (sent'=true);
/>

lone sig headlamp extends component {}
</
  formula ERATE=2;
  var enabled: bool init false;

  reward energyRew true : ERATE;
/>

// Connectors
lone sig laserScanTopic extends topic{}
</
  formula DROP_RATE = 0.03;
  formula DELAY=1.2; //2
/>

lone sig sensorMsgsImageTopic extends topic{}
</
  formula DROP_RATE = 0.13;
  formula DELAY=2.25;
/>

lone sig markerPoseTopic extends topic{}
</
  formula DROP_RATE = 0.06;
  formula DELAY=0.8;
/>

// Options
abstract sig option {}
</
/>

abstract sig speedSetting extends option {}
</
/>

lone sig halfSpeedSetting extends speedSetting {}
</
/>

lone sig fullSpeedSetting extends speedSetting {}
</
/>

// Constraints - ROS turtlebot

pred publishesTo[c:component, t:topic] { t in c.pub }
pred onlyPublishesTo[c:component, t:topic] { publishesTo[c,t] and all t':topic-t | not publishesTo[c,t'] }

pred subscribesTo[c:component, t:topic] { t in c.sub }
pred onlySubscribesTo[c:component, t:topic] { subscribesTo[c,t] and all t':topic-t | not subscribesTo[c,t'] }

pred doesNotSubscribe[c:component] { all t:topic | not subscribesTo[c,t] }
pred doesNotPublish[c:component] { all t:topic | not publishesTo[c,t] }

fact { all t:topic | t in component.pub+component.sub }

// Sensing constraints
fact { all c:lidar | onlyPublishesTo[c,laserScanTopic] } 
fact { all c:kinect | onlyPublishesTo[c,sensorMsgsImageTopic] }
fact { all c:camera | onlyPublishesTo[c,sensorMsgsImageTopic] }
fact { all c:sensing | doesNotSubscribe[c] }


// Aux component constraints
fact { all c:laserscanNodelet | onlyPublishesTo[c,laserScanTopic] }
fact { all c:laserscanNodelet | onlySubscribesTo[c,sensorMsgsImageTopic] }

fact { all c:markerRecognizer | onlySubscribesTo[c,sensorMsgsImageTopic] }
fact { all c:markerRecognizer | onlyPublishesTo[c,markerPoseTopic] }

fact { doesNotSubscribe[headlamp] and doesNotPublish[headlamp] }

// Localization constraints
fact { all c:localization-markerLocalization | onlySubscribesTo[c,laserScanTopic] }
fact { all c:markerLocalization | onlySubscribesTo[c,markerPoseTopic] }
fact { all c:localization | doesNotPublish[c] }

pred config{
  (some camera or some kinect) <=> some sensorMsgsImageTopic 
  (some laserscanNodelet or some lidar) <=> some laserScanTopic
  some markerRecognizer <=> some markerPoseTopic
  some kinect <=> some laserscanNodelet
  some camera <=> some markerLocalization
  some camera <=> some markerRecognizer
  some headlamp => some camera
  one sensing
  one localization
  no speedSetting
}

// Synthesis command
run config for 10


label success [some localization:processedOK=true]
label locReceived [some localization:received=true]
label dropped [some topic:dropped=true]

property maxP [ F success ] as safety
property minR{timeRew} [ F (dropped | locReceived | success) ] as time
property minR{energyRew} [ F (dropped | locReceived | success) ] as energy
property rangeP [ F dropped ]
property SmaxP [ F done ]
property SminP [ F done ]


