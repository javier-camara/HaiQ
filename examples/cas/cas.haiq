// ----------------------------------------------------------------------------
// cas.haiq - Collective Adaptive System (CAS) HaiQ model 
// Author: Javier Camara
// ----------------------------------------------------------------------------
// This model is based on the Collective Adaptive System example described in:
//    Thomas J. Glazier, Javier Camara, Bradley Schmerl, and David Garlan: 
//    Analyzing resilience properties of different topologies of 
//    collective adaptive systems.
//    3rd FoCAS Workshop on the Fundamentals of Collective Adaptive Systems.
//    pp. 55-60, 2015.
//    DOI: 10.1109/SASOW.2015.14
//-----------------------------------------------------------------------------
//const ATTACK_COST=5;
//const double CHANNEL_RELIABILITY;
//const DETECTION_THRESHOLD=5;
const ATTACK_COST;
const double CHANNEL_RELIABILITY;
const double DETECTION_THRESHOLD;

some sig sam { 
	conn : some sam,
	attackVector: one attacker }
</ 
  enum modes:{normal, attackDetected, compromised, adapted};
  var status:[modes] init normal;
  var resources:[0..10] init 10;
  var done: bool init true;
  formula detect=DETECTION_THRESHOLD;
  formula deplete=resources-ATTACK_COST>0?resources-ATTACK_COST:0;

  [casTick] (done) -> (done'=false);
  [attackVector:attack] (resources>0) & (status=normal) -> detect: (status'=attackDetected) & (resources'=deplete) + 1-detect: (status'=normal) & (resources'=deplete);
  [conn:alert] (resources>0) & (status=attackDetected) & (done=false) -> (done'=true); // Communicate attack (notify)
  [] (resources>0) & (status=attackDetected) & (done=false) -> (status'=adapted) & (done'=true); // Adapt
  [conn:alert] (resources>0) & (status=normal) & (done=false) -> CHANNEL_RELIABILITY: (status'=attackDetected) & (done'=true) + 1-CHANNEL_RELIABILITY: (status'=normal) & (done'=true); 
  [] (resources=0) -> (status'=compromised);
/>

const MAX_ATTACKER_RESOURCES=20;
one sig attacker { attacks : some sam }
</
  var done: bool init true;
  var readyToTack: bool init false;
  var resources:[0..MAX_ATTACKER_RESOURCES] init MAX_ATTACKER_RESOURCES;
  formula deplete=resources-ATTACK_COST>0?resources-ATTACK_COST:0;

  [attackerTick] (!readyToTack) & (done) -> (done'=false);
  [attacks:attack] (!readyToTack) & (resources>0) & (done=false) -> (resources'=deplete) & (done'=true) & (readyToTack'=true); // Attack
  [] (!readyToTack) & (done=false) -> (readyToTack'=true) & (done'=true); // Pass
  [attackerTack] (readyToTack) -> (readyToTack'=false);
/>

one sig clock {}
</
  enum turns:{attackerTurn, casTurn};
  var turn: [turns] init attackerTurn; // attacker starts playing
  
  [attackerTick] (turn=attackerTurn) & (casDone) -> (turn'=attackerTurn);
  [attackerTack] (turn=attackerTurn) -> (turn'=casTurn);
  [casTick] (turn=casTurn) & (casDone) -> (turn'=attackerTurn);
/>

label casDone [all sam:done=true]          // Did the CAS finish its turn?
label noSamDone [all sam:done=false]       // CAS at the start of its turn
label allSamAdapted [all sam:status=3]     // All Sam nodes adapted
label someSamAdapted [some sam:status=3]   // Some Sam nodes adapted
property rangeP [F allSamAdapted]          // Range min-max probability of CAS survival
property maxP [ F (allSamAdapted | attacker_0_resources=0) ]           // Configuration maximizing CAS survival
property maxP [ F (someSamAdapted | attacker_0_resources=0) ]           // Configuration maximizing CAS survival

pred cas{
  all s:sam | sam in s.*conn
  (no iden & conn) and (conn = ~conn)
  all a:attacker | all s:sam | s in a.attacks <=> a in s.attackVector
//  all s:sam | #s.conn=2 // Imposes RING topology
}

run cas for exactly 1 attacker, exactly 6 sam
